	八种数据类型:

                基本数据类型： integer, float, string, boolean
                符合数据类型： array object
                特殊数据类型： rescore， null

                integer:
                    超过最大值就会转换为float
                float： 最大精度14位
                tips:
                    通过运算得来的float精度会有所丢失，在进行比较的时候会因为精度丢失导致结果不如预期
                    解决方案:
                        通过设置一个非常小的值，如果两者之间差值的绝对值小于最小值则认为两者相等
                string：
                    单引号：
                        单引号不解析引号内部的变量，原样输出， 效率高
                    双引号:
                        双引号会解析内部的变量，如果需要输入一个复杂的变量需要用{}包起来
                        "afdsfdsafds{$arr["no1"]}"
                    heredoc:
                        返回大段的HTML代码，代码中可以包含变量，会对变量进行解析
                    nodoc:
                        返回打断的HTML代码，代码中的变量，会当成字符串输出
                boolean:
                    值： true false   
                    类型转换说明：
                        "", "0", null, 0, array(), object{}, 都认为是false
                        其余都是true
                数据转换
                    在进行运算的时候会根据运算的类型对变量进行相对应的类型转换，
                tips:
                    静态数据类型：类型在变量定义的时候就决定下来，此后不允许更改变量的类型
                    动态数据类型：变量的类型由它的值决定
                    强数据类型： 变量的类型在程序运行时不允许编译器进行类型转换
                    弱数据类型：变量的类型在程序运行时可以由编译器进行类型转换
                变量的传递方式
                    按值传递
                    按引用传递
                命名说明
                    以$开头，第一位不可以是数字，由数字，字母, _组成

                
                强制类型转换:
                settype("string", $i);
                (string) $i
                int_val($i)
        
                变量相关函数:
                isset()  //检测变量是否设置过，如果为设置或值为null则返回false，其他情况返回true
                empty() //检测变量的值是否为空值， 0, '', '0', null 都认为是空，空则返回true
                is_array(); //检测变量的类型
                
                运算符:
                    数学运算符:
                        + - * / %
                    自增自减运算符：
                        $i-- --$i ++$i $i++                        
                    关系运算符：
                        > < == != >= <= === !==
                    逻辑运算符:
                        && || ! and or ? :
                    执行运算符：
                        ``
                    错误控制运算符：
                        @
                    字符串连接符：
                        .
                流程控制    
                if else if else
                替代语法：
                    常用于模板中控制需要显示的内容
                    <?php if(exp): ?>
                    <?php endif: ?>

                    <?php if(exp): ?>
                    <?php else if(exp): ?>
                    <?php endif: ?>
                switch 
                    多分枝控制语句
                    switch(exp){
                        case exp:
                            //语句
                            break;
                    }
                    tips: 当匹配到一个入口时程序将一直往下执行，直到遇到break为止, 
                for
                    for(初始值;条件判断;步长){
                        //执行语句
                    }
                while
                    while(exp){
    
                    }
                do..while
                    do{
                        //执行一次语句后进行条件判断，如何条件则继续执行
                    }while(exp)
                break
                    break 2; 表示终止两层循环
                continue
                    continue 2; 表示跳出两层循环
                goto：
                    goto end;
                    echo '1';
                    end:
                    echo "2";